name: solarcast

services:
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes: [redis-data:/data]
    restart: unless-stopped

  backend:
    container_name: solarcast-backend
    build:
      context: ./backend
      dockerfile: dockerfile
    working_dir: /app
    entrypoint: ["/app/server"]
    command: ["-serve"]
    environment:
      DOCKER_CONTAINER: "1"
      backend_port: "8080"
      REDIS_URL: "redis:6379"
      REDIS_PASSWORD: ""
      ADMIN_TOKEN_SECRET: "dev_only_token"
    expose: ["8080"]   # internal only
    volumes:
      - ./backend/data:/app/data
    depends_on: [redis]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 3s
      retries: 6
      start_period: 10s

  frontend_build:
    build:
      context: ./solar-cast-frontend
    working_dir: /app
    command: sh -lc "npm ci && npm run build"
    volumes:
      - frontend-dist:/app/dist
    restart: "no"

  scrape:
    build:
      context: ./backend
      dockerfile: dockerfile
    working_dir: /app
    entrypoint: ["/app/server"]
    command: ["-scrape", "-pages", "15"]
    volumes:
      - ./backend/data:/app/data
    depends_on:
      backend:
        condition: service_started
    restart: "no"

  notify_reload:
    image: curlimages/curl:8.8.0
    environment:
      ADMIN_TOKEN_SECRET: "dev_only_token"
    depends_on:
      scrape:
        condition: service_completed_successfully
    command:
      - sh
      - -c
      - |
        set -e
        until curl -fsS http://backend:8080/api/health >/dev/null; do sleep 1; done
        curl -fsS -X POST -H "X-Admin-Token: $${ADMIN_TOKEN_SECRET}" http://backend:8080/api/admin/reload
    restart: "no"

  caddy:
    image: caddy:2
    depends_on:
      - backend
      - frontend_build
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: "X.X.X.X.nip.io"   # replace X.X.X.X with EC2 public IP
      EMAIL: "you@example.com"
    volumes:
      - caddy-data:/data
      - caddy-config:/config
      - frontend-dist:/site
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    restart: unless-stopped

volumes:
  redis-data:
  caddy-data:
  caddy-config:
  frontend-dist: